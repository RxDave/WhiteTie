<?xml version="1.0" encoding="utf-8"?>
<!-- 
This file was originally generated by Visual Studio 2013, modified and included with White Tie for use in later versions of Visual Studio and command-line builds.
-->
<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <WhiteTieNuGetVSTargetsImported>True</WhiteTieNuGetVSTargetsImported>

    <NuGetExePath Condition=" '$(NuGetExePath)' == '' ">$(NuGetDir)NuGet.exe</NuGetExePath>

    <PackageOutputDir Condition=" '$(PackageOutputDir)' == '' ">$(TargetDir.Trim('\\'))</PackageOutputDir>

    <NonInteractiveSwitch Condition=" '$(VisualStudioVersion)' != '' AND '$(OS)' == 'Windows_NT' ">-NonInteractive</NonInteractiveSwitch>

    <BuildDependsOn Condition=" $(BuildPackage) == 'true' ">
      $(BuildDependsOn);
      BuildPackage;
    </BuildDependsOn>
  </PropertyGroup>

  <Target Name="_CreateNuGetCommands">

    <MakeDir Directories="$(NuGetDir)" />

    <ItemGroup Condition=" '$(OS)' == 'Windows_NT' ">
      <_NuGetExePath Include="$(NuGetExePath)" />
    </ItemGroup>

    <PropertyGroup>
      <NuGetExePath Condition=" '$(OS)' == 'Windows_NT' ">%(_NuGetExePath.FullPath)</NuGetExePath>

      <NuGetCommand Condition=" '$(OS)' == 'Windows_NT' ">"$(NuGetExePath)"</NuGetCommand>
      <NuGetCommand Condition=" '$(OS)' != 'Windows_NT' ">mono --runtime=v4.0.30319 $(NuGetExePath)</NuGetCommand>

      <BuildCommand>$(NuGetCommand) pack "$(ProjectPath)" -Properties Configuration=$(Configuration) $(NonInteractiveSwitch) -OutputDirectory "$(PackageOutputDir)" -symbols</BuildCommand>
    </PropertyGroup>

  </Target>

  <Target Name="CheckPrerequisites">

    <Error Condition="'$(DownloadNuGetExe)' != 'true' AND !Exists('$(NuGetExePath)')" Text="Unable to locate '$(NuGetExePath)'" />

    <!--
      Take advantage of MsBuild's build dependency tracking to make sure that we only ever download nuget.exe once.
      This effectively acts as a lock that makes sure that the download operation will only happen once and all
      parallel builds will have to wait for it to complete.
    -->
    <MsBuild Targets="_DownloadNuGet" Projects="$(MSBuildThisFileFullPath)" Properties="Configuration=NOT_IMPORTANT;DownloadNuGetExe=$(DownloadNuGetExe);NuGetExePath=$(NuGetExePath)" />
  </Target>

  <Target Name="_DownloadNuGet">
    <DownloadNuGet OutputFilename="$(NuGetExePath)" Condition=" '$(DownloadNuGetExe)' == 'true' AND !Exists('$(NuGetExePath)')" />
  </Target>

  <Target Name="BuildPackage" DependsOnTargets="_CreateNuGetCommands;CheckPrerequisites">
    <Exec Command="$(BuildCommand)"
          Condition=" '$(OS)' != 'Windows_NT' " />

    <Exec Command="$(BuildCommand)"
          LogStandardErrorAsError="true"
          Condition=" '$(OS)' == 'Windows_NT' " />
  </Target>

  <UsingTask TaskName="DownloadNuGet" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
    <ParameterGroup>
      <OutputFilename ParameterType="System.String" Required="true" />
    </ParameterGroup>
    <Task>
      <Reference Include="System.Core" />
      <Using Namespace="System" />
      <Using Namespace="System.IO" />
      <Using Namespace="System.Net" />
      <Using Namespace="Microsoft.Build.Framework" />
      <Using Namespace="Microsoft.Build.Utilities" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
                try {
                    OutputFilename = Path.GetFullPath(OutputFilename);

                    Log.LogMessage("Downloading latest version of NuGet.exe...");
                    WebClient webClient = new WebClient();
                    webClient.DownloadFile("https://nuget.org/nuget.exe", OutputFilename);

                    return true;
                }
                catch (Exception ex) {
                    Log.LogErrorFromException(ex);
                    return false;
                }
            ]]>
      </Code>
    </Task>
  </UsingTask>
</Project>